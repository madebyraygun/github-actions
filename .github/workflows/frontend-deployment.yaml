name: Frontend base deployment

on:
  workflow_call:
    inputs:
      run_id:
        required: true
        type: string
      run_number:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      ssh_key:
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      # Pull repository into the current pipeline.
      - name: Pull repository
        uses: actions/checkout@v4

      # Setup container with private SSH Key (used by rsync)
      - name: Load private SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ssh_key }}

      # Copy .env file
      - name: Copy .env
        run: echo "${{secrets.project_env }}" > .env

      # Use a specific version of Node
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "${{ vars.node_version }}.x"

      # Install NPM dependencies
      - name: NPM install
        run: npm ci

      # Build assets using NPM scripts
      - name: Build assets
        run: npm run production

      # RSYNC
      # - rsync [options] ~/localdir ssh_user@ssh_host:destination_directory, this will copy the files to the remote server and delete any files that are not present in the local directory
      - name: Deploy with rsync
        run: |
          rsync -azh --delete -e "ssh -o StrictHostKeyChecking=no" ./dist ${{ vars.ssh_user }}@${{ vars.ssh_host }}:${{ vars.remote_project_root }}/deploy-cache

      # File management
      # - Move files to the correct directory create symlinks
      - name: Post deploy
        id: post-deploy
        continue-on-error: true
        uses: appleboy/ssh-action@master
        env:
          PROJECT_ROOT: ${{ vars.remote_project_root }}
          RUN_ID: ${{ inputs.run_id }}
          RUN_NUMBER: ${{ inputs.run_number }}
        with:
          host: ${{ vars.ssh_host }}
          username: ${{ vars.ssh_user }}
          key: ${{ secrets.ssh_key }}
          envs: PROJECT_ROOT, RUN_ID, RUN_NUMBER
          script: |
            set -e

            if [ -d "$PROJECT_ROOT/releases/$RUN_ID.$RUN_NUMBER" ];
              then
              echo "Removing: releases/$RUN_ID.$RUN_NUMBER"
              rm -rf $PROJECT_ROOT/releases/$RUN_ID.$RUN_NUMBER;
            fi

            echo "Creating releases/$RUN_ID.$RUN_NUMBER"
            cp -dR $PROJECT_ROOT/deploy-cache $PROJECT_ROOT/releases/$RUN_ID.$RUN_NUMBER;

            echo "Linking current to revision $RUN_ID.$RUN_NUMBER"

            rm -f $PROJECT_ROOT/current
            ln -s $PROJECT_ROOT/releases/$RUN_ID.$RUN_NUMBER $PROJECT_ROOT/current

            echo "Symlinking env"
            ln -nfs $PROJECT_ROOT/.env $PROJECT_ROOT/deploy-cache
            ln -nfs $PROJECT_ROOT/webhook.php $PROJECT_ROOT/releases/$RUN_ID.$RUN_NUMBER/dist

      # Revert if post-deploy step fails
      - name: Revert on failure
        if: steps.post-deploy.outcome == 'failure'
        uses: appleboy/ssh-action@master
        env:
          PROJECT_ROOT: ${{ vars.remote_project_root }}
          RUN_ID: ${{ inputs.run_id }}
          RUN_NUMBER: ${{ inputs.run_number }}
        with:
          host: ${{ vars.ssh_host }}
          username: ${{ vars.ssh_user }}
          key: ${{ secrets.ssh_key }}
          envs: PROJECT_ROOT, RUN_ID, RUN_NUMBER
          script: |
            echo "Failure in the post-deploy step, reverting to the previous release"
            rm -f $PROJECT_ROOT/current
            rm -rf $PROJECT_ROOT/releases/$RUN_ID.$RUN_NUMBER

            # Find the most recent and symlink it to current
            ls -t $PROJECT_ROOT/releases | head -n 1
            ln -s $PROJECT_ROOT/releases/$(ls -t $PROJECT_ROOT/releases | head -n 1) $PROJECT_ROOT/current

            exit 1

      # Remove old releases
      - name: Remove old releases
        if: steps.post-deploy.outcome == 'success'
        uses: appleboy/ssh-action@master
        env:
          PROJECT_ROOT: ${{ vars.remote_project_root }}
        with:
          host: ${{ vars.ssh_host }}
          username: ${{ vars.ssh_user }}
          key: ${{ secrets.ssh_key }}
          envs: PROJECT_ROOT
          script: |
            echo "Removing old releases"
            cd $PROJECT_ROOT/releases && ls -t | tail -n +6 | xargs rm -rf

